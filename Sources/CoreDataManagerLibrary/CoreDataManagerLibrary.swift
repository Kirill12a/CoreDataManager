// The Swift Programming Language
// https://docs.swift.org/swift-book

import CoreData

public final class CoreDataManager {
    public static var shared: CoreDataManager?

    private let persistentContainer: NSPersistentContainer

    // –ü—É–±–ª–∏—á–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
    public static func configure(withModelName modelName: String) {
        shared = CoreDataManager(modelName: modelName)
        print("üåü CoreDataManager configured with model: \(modelName)")
    }

    // –ó–∞–∫—Ä—ã—Ç—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
    private init(modelName: String) {
        persistentContainer = NSPersistentContainer(name: modelName)
        persistentContainer.loadPersistentStores { storeDescription, error in
            if let error = error as NSError? {
                fatalError("Unresolved error \(error), \(error.userInfo)")
            }
            self.debugPrint("üì° Database URL: \(storeDescription.url?.absoluteString ?? "N/A")")
//            print("üì° Database URL: \(storeDescription.url?.absoluteString ?? "N/A")")
        }
    }

    private var context: NSManagedObjectContext {
        return persistentContainer.viewContext
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    public func saveContext() {
        if context.hasChanges {
            do {
                try context.save()
                debugPrint("üíæ Context saved successfully.")
            } catch {
                let nserror = error as NSError
                fatalError("Unresolved error \(nserror), \(nserror.userInfo)")
            }
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    public func createEntity<T: NSManagedObject>(entityType: T.Type, configure: (T) -> Void) {
        let entityName = String(describing: entityType)
        guard let entityDescription = NSEntityDescription.entity(forEntityName: entityName, in: context) else {
            fatalError("Could not find entity name: \(entityName)")
        }
        let entity = T(entity: entityDescription, insertInto: context)
        configure(entity)
        saveContext()
        debugPrint("üÜï Created new \(entityName).")
//        print("üÜï Created new \(entityName).")
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ —É—Å–ª–æ–≤–∏—é
    public func fetchEntities<T: NSManagedObject>(entityType: T.Type, predicate: NSPredicate? = nil) -> [T] {
        let entityName = String(describing: entityType)
        let fetchRequest = NSFetchRequest<T>(entityName: entityName)
        fetchRequest.predicate = predicate

        do {
            let results = try context.fetch(fetchRequest)
            debugPrint("üîç Found \(results.count) \(entityName)(s) matching predicate.")
//            print("üîç Found \(results.count) \(entityName)(s) matching predicate.")
            return results
        } catch {
            fatalError("Failed to fetch entities: \(error)")
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ —É—Å–ª–æ–≤–∏—é
    public func updateEntities<T: NSManagedObject>(entityType: T.Type, predicate: NSPredicate, configure: (T) -> Void) {
        let entities = fetchEntities(entityType: entityType, predicate: predicate)
        entities.forEach(configure)
        saveContext()
        debugPrint("üîÑ Updated \(entities.count) \(String(describing: entityType)) entities.")
//        print("üîÑ Updated \(entities.count) \(String(describing: entityType)) entities.")
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ —É—Å–ª–æ–≤–∏—é
    public func deleteEntities<T: NSManagedObject>(entityType: T.Type, predicate: NSPredicate) {
        let entities = fetchEntities(entityType: entityType, predicate: predicate)
        entities.forEach(context.delete)
        saveContext()
        debugPrint("üóë Deleted \(entities.count) \(String(describing: entityType)) entities.")
//        print("üóë Deleted \(entities.count) \(String(describing: entityType)) entities.")
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—É—â–Ω–æ—Å—Ç–∏
    public func deleteAllEntities<T: NSManagedObject>(entityType: T.Type) {
        let fetchRequest: NSFetchRequest<NSFetchRequestResult> = NSFetchRequest(entityName: String(describing: entityType))
        let batchDeleteRequest = NSBatchDeleteRequest(fetchRequest: fetchRequest)
        do {
            try context.execute(batchDeleteRequest)
            saveContext()
            debugPrint("üóë Deleted all objects of type \(entityType).")
//            print("üóë Deleted all objects of type \(entityType).")
        } catch {
            print("Error deleting objects: \(error)")
        }
    }


    private func debugPrint(_ message: String) {
        if isDiffModeEnabled() {
            print(message)
        }
    }

   private func isDiffModeEnabled() -> Bool {
        return ProcessInfo.processInfo.arguments.contains("CoreDataDebugMode")
    }
}

